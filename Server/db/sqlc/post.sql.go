// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO Posts (author_id, text_content)
VALUES ($1, $2) RETURNING id, author_id, text_content, created_at, updated_at
`

type CreatePostParams struct {
	AuthorID    int64  `json:"author_id"`
	TextContent string `json:"text_content"`
}

// Create a post
func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.AuthorID, arg.TextContent)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.TextContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE
FROM Posts
WHERE id = $1
`

// Delete a post by ID
func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getListAllPost = `-- name: GetListAllPost :many
SELECT id, author_id, text_content, created_at, updated_at
FROM Posts
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetListAllPostParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Get a list of all posts
func (q *Queries) GetListAllPost(ctx context.Context, arg GetListAllPostParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getListAllPost, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.TextContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListPostByAuthor = `-- name: GetListPostByAuthor :many
SELECT id, author_id, text_content, created_at, updated_at
FROM Posts
WHERE author_id = $1
ORDER BY created_at LIMIT $2
OFFSET $3
`

type GetListPostByAuthorParams struct {
	AuthorID int64 `json:"author_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

// Get a list of all posts of one user
func (q *Queries) GetListPostByAuthor(ctx context.Context, arg GetListPostByAuthorParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getListPostByAuthor, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.TextContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, author_id, text_content, created_at, updated_at
FROM Posts
WHERE id = $1
`

// Get a post by ID
func (q *Queries) GetPostById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.TextContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE Posts
SET text_content = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, author_id, text_content, created_at, updated_at
`

type UpdatePostParams struct {
	ID          int64  `json:"id"`
	TextContent string `json:"text_content"`
}

// Update a post
func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost, arg.ID, arg.TextContent)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.TextContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
