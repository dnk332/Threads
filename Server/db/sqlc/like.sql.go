// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: like.sql

package db

import (
	"context"
)

const getAllLikesOfPost = `-- name: GetAllLikesOfPost :many
SELECT id, post_id, author_id, created_at
FROM Likes
WHERE post_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetAllLikesOfPostParams struct {
	PostID int64 `json:"post_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Get all likes of post
func (q *Queries) GetAllLikesOfPost(ctx context.Context, arg GetAllLikesOfPostParams) ([]Like, error) {
	rows, err := q.db.Query(ctx, getAllLikesOfPost, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.AuthorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLikesOfUser = `-- name: GetAllLikesOfUser :many
SELECT id, post_id, author_id, created_at
FROM Likes
WHERE author_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetAllLikesOfUserParams struct {
	AuthorID int64 `json:"author_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

// Get all likes of user
func (q *Queries) GetAllLikesOfUser(ctx context.Context, arg GetAllLikesOfUserParams) ([]Like, error) {
	rows, err := q.db.Query(ctx, getAllLikesOfUser, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.AuthorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likePost = `-- name: LikePost :one
INSERT INTO Likes (post_id, author_id)
VALUES ($1, $2) RETURNING id, post_id, author_id, created_at
`

type LikePostParams struct {
	PostID   int64 `json:"post_id"`
	AuthorID int64 `json:"author_id"`
}

// Like a post
func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (Like, error) {
	row := q.db.QueryRow(ctx, likePost, arg.PostID, arg.AuthorID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.AuthorID,
		&i.CreatedAt,
	)
	return i, err
}

const unlikePost = `-- name: UnlikePost :exec
DELETE FROM Likes 
WHERE post_id = $1 AND author_id = $2
`

type UnlikePostParams struct {
	PostID   int64 `json:"post_id"`
	AuthorID int64 `json:"author_id"`
}

// Unlike a post
func (q *Queries) UnlikePost(ctx context.Context, arg UnlikePostParams) error {
	_, err := q.db.Exec(ctx, unlikePost, arg.PostID, arg.AuthorID)
	return err
}
