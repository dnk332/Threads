// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: media.sql

package db

import (
	"context"
)

const addPostImage = `-- name: AddPostImage :one
INSERT INTO Medias (link, type, reference_object, reference_object_id)
VALUES ($1, 'image', 'post', $2) RETURNING id, link, type, order_column, created_at, reference_object, reference_object_id
`

type AddPostImageParams struct {
	Link              string `json:"link"`
	ReferenceObjectID int64  `json:"reference_object_id"`
}

// Set user avatar
func (q *Queries) AddPostImage(ctx context.Context, arg AddPostImageParams) (Media, error) {
	row := q.db.QueryRow(ctx, addPostImage, arg.Link, arg.ReferenceObjectID)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Type,
		&i.OrderColumn,
		&i.CreatedAt,
		&i.ReferenceObject,
		&i.ReferenceObjectID,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, link, type, order_column, created_at, reference_object, reference_object_id
FROM Medias
WHERE reference_object = $1
  AND reference_object_id = $2
  AND type = 'image'
`

type GetImageParams struct {
	ReferenceObject   string `json:"reference_object"`
	ReferenceObjectID int64  `json:"reference_object_id"`
}

// Get image
func (q *Queries) GetImage(ctx context.Context, arg GetImageParams) (Media, error) {
	row := q.db.QueryRow(ctx, getImage, arg.ReferenceObject, arg.ReferenceObjectID)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Type,
		&i.OrderColumn,
		&i.CreatedAt,
		&i.ReferenceObject,
		&i.ReferenceObjectID,
	)
	return i, err
}

const setUserAvatar = `-- name: SetUserAvatar :one
INSERT INTO Medias (link, type, reference_object, reference_object_id)
VALUES ($1, 'image', 'user_profile', $2) RETURNING id, link, type, order_column, created_at, reference_object, reference_object_id
`

type SetUserAvatarParams struct {
	Link              string `json:"link"`
	ReferenceObjectID int64  `json:"reference_object_id"`
}

// Set user avatar
func (q *Queries) SetUserAvatar(ctx context.Context, arg SetUserAvatarParams) (Media, error) {
	row := q.db.QueryRow(ctx, setUserAvatar, arg.Link, arg.ReferenceObjectID)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Type,
		&i.OrderColumn,
		&i.CreatedAt,
		&i.ReferenceObject,
		&i.ReferenceObjectID,
	)
	return i, err
}
